# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _iCppExtention
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


iFind = _iCppExtention.iFind
iPickUpNum = _iCppExtention.iPickUpNum
iIntToString = _iCppExtention.iIntToString
iGetList = _iCppExtention.iGetList
class Dvector3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dvector3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dvector3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Dvector3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Dvector3D
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Dvector3D_copy(*args)
    def __iadd__(*args): return _iCppExtention.Dvector3D___iadd__(*args)
    def __isub__(*args): return _iCppExtention.Dvector3D___isub__(*args)
    def __imul__(*args): return _iCppExtention.Dvector3D___imul__(*args)
    def __idiv__(*args): return _iCppExtention.Dvector3D___idiv__(*args)
    def __add__(*args): return _iCppExtention.Dvector3D___add__(*args)
    def __sub__(*args): return _iCppExtention.Dvector3D___sub__(*args)
    def __mul__(*args): return _iCppExtention.Dvector3D___mul__(*args)
    def __div__(*args): return _iCppExtention.Dvector3D___div__(*args)
    __swig_getmethods__["chkSame"] = lambda x: _iCppExtention.Dvector3D_chkSame
    if _newclass:chkSame = staticmethod(_iCppExtention.Dvector3D_chkSame)
    __swig_getmethods__["distance1"] = lambda x: _iCppExtention.Dvector3D_distance1
    if _newclass:distance1 = staticmethod(_iCppExtention.Dvector3D_distance1)
    __swig_getmethods__["distance2"] = lambda x: _iCppExtention.Dvector3D_distance2
    if _newclass:distance2 = staticmethod(_iCppExtention.Dvector3D_distance2)
    __swig_getmethods__["norm"] = lambda x: _iCppExtention.Dvector3D_norm
    if _newclass:norm = staticmethod(_iCppExtention.Dvector3D_norm)
    __swig_getmethods__["dot"] = lambda x: _iCppExtention.Dvector3D_dot
    if _newclass:dot = staticmethod(_iCppExtention.Dvector3D_dot)
    __swig_getmethods__["angle"] = lambda x: _iCppExtention.Dvector3D_angle
    if _newclass:angle = staticmethod(_iCppExtention.Dvector3D_angle)
    __swig_getmethods__["dihedral"] = lambda x: _iCppExtention.Dvector3D_dihedral
    if _newclass:dihedral = staticmethod(_iCppExtention.Dvector3D_dihedral)
    __swig_getmethods__["Vproduct"] = lambda x: _iCppExtention.Dvector3D_Vproduct
    if _newclass:Vproduct = staticmethod(_iCppExtention.Dvector3D_Vproduct)
    __swig_getmethods__["rotation_x"] = lambda x: _iCppExtention.Dvector3D_rotation_x
    if _newclass:rotation_x = staticmethod(_iCppExtention.Dvector3D_rotation_x)
    __swig_getmethods__["rotation_y"] = lambda x: _iCppExtention.Dvector3D_rotation_y
    if _newclass:rotation_y = staticmethod(_iCppExtention.Dvector3D_rotation_y)
    __swig_getmethods__["rotation_z"] = lambda x: _iCppExtention.Dvector3D_rotation_z
    if _newclass:rotation_z = staticmethod(_iCppExtention.Dvector3D_rotation_z)
    __swig_getmethods__["rotation"] = lambda x: _iCppExtention.Dvector3D_rotation
    if _newclass:rotation = staticmethod(_iCppExtention.Dvector3D_rotation)
    __swig_getmethods__["LatticeToXYZ"] = lambda x: _iCppExtention.Dvector3D_LatticeToXYZ
    if _newclass:LatticeToXYZ = staticmethod(_iCppExtention.Dvector3D_LatticeToXYZ)
    def set_x(*args): return _iCppExtention.Dvector3D_set_x(*args)
    def set_y(*args): return _iCppExtention.Dvector3D_set_y(*args)
    def set_z(*args): return _iCppExtention.Dvector3D_set_z(*args)
    def set_xyz(*args): return _iCppExtention.Dvector3D_set_xyz(*args)
    def change_xy(*args): return _iCppExtention.Dvector3D_change_xy(*args)
    def change_yz(*args): return _iCppExtention.Dvector3D_change_yz(*args)
    def change_zx(*args): return _iCppExtention.Dvector3D_change_zx(*args)
    def get_x(*args): return _iCppExtention.Dvector3D_get_x(*args)
    def get_y(*args): return _iCppExtention.Dvector3D_get_y(*args)
    def get_z(*args): return _iCppExtention.Dvector3D_get_z(*args)
Dvector3D_swigregister = _iCppExtention.Dvector3D_swigregister
Dvector3D_swigregister(Dvector3D)
iPos = _iCppExtention.iPos
iPickUp = _iCppExtention.iPickUp
iPrintWidth = _iCppExtention.iPrintWidth
iCompareString = _iCppExtention.iCompareString
Dvector3D_chkSame = _iCppExtention.Dvector3D_chkSame
Dvector3D_distance1 = _iCppExtention.Dvector3D_distance1
Dvector3D_distance2 = _iCppExtention.Dvector3D_distance2
Dvector3D_norm = _iCppExtention.Dvector3D_norm
Dvector3D_dot = _iCppExtention.Dvector3D_dot
Dvector3D_angle = _iCppExtention.Dvector3D_angle
Dvector3D_dihedral = _iCppExtention.Dvector3D_dihedral
Dvector3D_Vproduct = _iCppExtention.Dvector3D_Vproduct
Dvector3D_rotation_x = _iCppExtention.Dvector3D_rotation_x
Dvector3D_rotation_y = _iCppExtention.Dvector3D_rotation_y
Dvector3D_rotation_z = _iCppExtention.Dvector3D_rotation_z
Dvector3D_rotation = _iCppExtention.Dvector3D_rotation
Dvector3D_LatticeToXYZ = _iCppExtention.Dvector3D_LatticeToXYZ

class ViewAtom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewAtom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewAtom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_ViewAtom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_ViewAtom
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.ViewAtom_copy(*args)
    def get_view(*args): return _iCppExtention.ViewAtom_get_view(*args)
    def get_color_R(*args): return _iCppExtention.ViewAtom_get_color_R(*args)
    def get_color_G(*args): return _iCppExtention.ViewAtom_get_color_G(*args)
    def get_color_B(*args): return _iCppExtention.ViewAtom_get_color_B(*args)
    def get_radius(*args): return _iCppExtention.ViewAtom_get_radius(*args)
    def get_transpar(*args): return _iCppExtention.ViewAtom_get_transpar(*args)
    def get_gl_shininess(*args): return _iCppExtention.ViewAtom_get_gl_shininess(*args)
    def get_gl_slice(*args): return _iCppExtention.ViewAtom_get_gl_slice(*args)
    def get_gl_stack(*args): return _iCppExtention.ViewAtom_get_gl_stack(*args)
    def get_text_view(*args): return _iCppExtention.ViewAtom_get_text_view(*args)
    def get_text(*args): return _iCppExtention.ViewAtom_get_text(*args)
    def get_text_color_R(*args): return _iCppExtention.ViewAtom_get_text_color_R(*args)
    def get_text_color_G(*args): return _iCppExtention.ViewAtom_get_text_color_G(*args)
    def get_text_color_B(*args): return _iCppExtention.ViewAtom_get_text_color_B(*args)
    def view_on(*args): return _iCppExtention.ViewAtom_view_on(*args)
    def view_off(*args): return _iCppExtention.ViewAtom_view_off(*args)
    def set_color_R(*args): return _iCppExtention.ViewAtom_set_color_R(*args)
    def set_color_G(*args): return _iCppExtention.ViewAtom_set_color_G(*args)
    def set_color_B(*args): return _iCppExtention.ViewAtom_set_color_B(*args)
    def set_radius(*args): return _iCppExtention.ViewAtom_set_radius(*args)
    def set_transpar(*args): return _iCppExtention.ViewAtom_set_transpar(*args)
    def set_gl_shininess(*args): return _iCppExtention.ViewAtom_set_gl_shininess(*args)
    def set_gl_slice(*args): return _iCppExtention.ViewAtom_set_gl_slice(*args)
    def set_gl_stack(*args): return _iCppExtention.ViewAtom_set_gl_stack(*args)
    def text_view_on(*args): return _iCppExtention.ViewAtom_text_view_on(*args)
    def text_view_off(*args): return _iCppExtention.ViewAtom_text_view_off(*args)
    def set_text(*args): return _iCppExtention.ViewAtom_set_text(*args)
    def set_text_color_R(*args): return _iCppExtention.ViewAtom_set_text_color_R(*args)
    def set_text_color_G(*args): return _iCppExtention.ViewAtom_set_text_color_G(*args)
    def set_text_color_B(*args): return _iCppExtention.ViewAtom_set_text_color_B(*args)
ViewAtom_swigregister = _iCppExtention.ViewAtom_swigregister
ViewAtom_swigregister(ViewAtom)

class ViewBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewBond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_ViewBond(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_ViewBond
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.ViewBond_copy(*args)
    def get_view(*args): return _iCppExtention.ViewBond_get_view(*args)
    def get_slice(*args): return _iCppExtention.ViewBond_get_slice(*args)
    def get_stack(*args): return _iCppExtention.ViewBond_get_stack(*args)
    def get_type(*args): return _iCppExtention.ViewBond_get_type(*args)
    def get_width(*args): return _iCppExtention.ViewBond_get_width(*args)
    def get_dist_ratio_1(*args): return _iCppExtention.ViewBond_get_dist_ratio_1(*args)
    def get_dist_ratio_2(*args): return _iCppExtention.ViewBond_get_dist_ratio_2(*args)
    def get_color_R1(*args): return _iCppExtention.ViewBond_get_color_R1(*args)
    def get_color_G1(*args): return _iCppExtention.ViewBond_get_color_G1(*args)
    def get_color_B1(*args): return _iCppExtention.ViewBond_get_color_B1(*args)
    def get_color_R2(*args): return _iCppExtention.ViewBond_get_color_R2(*args)
    def get_color_G2(*args): return _iCppExtention.ViewBond_get_color_G2(*args)
    def get_color_B2(*args): return _iCppExtention.ViewBond_get_color_B2(*args)
    def get_transpar(*args): return _iCppExtention.ViewBond_get_transpar(*args)
    def view_on(*args): return _iCppExtention.ViewBond_view_on(*args)
    def view_off(*args): return _iCppExtention.ViewBond_view_off(*args)
    def set_slice(*args): return _iCppExtention.ViewBond_set_slice(*args)
    def set_stack(*args): return _iCppExtention.ViewBond_set_stack(*args)
    def set_type(*args): return _iCppExtention.ViewBond_set_type(*args)
    def set_width(*args): return _iCppExtention.ViewBond_set_width(*args)
    def set_dist_ratio_1(*args): return _iCppExtention.ViewBond_set_dist_ratio_1(*args)
    def set_dist_ratio_2(*args): return _iCppExtention.ViewBond_set_dist_ratio_2(*args)
    def set_color_R1(*args): return _iCppExtention.ViewBond_set_color_R1(*args)
    def set_color_G1(*args): return _iCppExtention.ViewBond_set_color_G1(*args)
    def set_color_B1(*args): return _iCppExtention.ViewBond_set_color_B1(*args)
    def set_color_R2(*args): return _iCppExtention.ViewBond_set_color_R2(*args)
    def set_color_G2(*args): return _iCppExtention.ViewBond_set_color_G2(*args)
    def set_color_B2(*args): return _iCppExtention.ViewBond_set_color_B2(*args)
    def set_transpar(*args): return _iCppExtention.ViewBond_set_transpar(*args)
ViewBond_swigregister = _iCppExtention.ViewBond_swigregister
ViewBond_swigregister(ViewBond)

class Atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Atom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Atom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Atom
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Atom_copy(*args)
    def get_atomic_number(*args): return _iCppExtention.Atom_get_atomic_number(*args)
    def get_mass_number(*args): return _iCppExtention.Atom_get_mass_number(*args)
    def get_bond_distance(*args): return _iCppExtention.Atom_get_bond_distance(*args)
    def get_symbol(*args): return _iCppExtention.Atom_get_symbol(*args)
    def get_R(*args): return _iCppExtention.Atom_get_R(*args)
    def get_va(*args): return _iCppExtention.Atom_get_va(*args)
    def set_atomic_number(*args): return _iCppExtention.Atom_set_atomic_number(*args)
    def set_symbol(*args): return _iCppExtention.Atom_set_symbol(*args)
    def set_R(*args): return _iCppExtention.Atom_set_R(*args)
    __swig_getmethods__["SymbolToNumber"] = lambda x: _iCppExtention.Atom_SymbolToNumber
    if _newclass:SymbolToNumber = staticmethod(_iCppExtention.Atom_SymbolToNumber)
Atom_swigregister = _iCppExtention.Atom_swigregister
Atom_swigregister(Atom)
Atom_SymbolToNumber = _iCppExtention.Atom_SymbolToNumber

class Bond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Bond(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Bond
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Bond_copy(*args)
    def get_iatom1(*args): return _iCppExtention.Bond_get_iatom1(*args)
    def get_iatom2(*args): return _iCppExtention.Bond_get_iatom2(*args)
    def get_vb(*args): return _iCppExtention.Bond_get_vb(*args)
    def set_iatom1(*args): return _iCppExtention.Bond_set_iatom1(*args)
    def set_iatom2(*args): return _iCppExtention.Bond_set_iatom2(*args)
Bond_swigregister = _iCppExtention.Bond_swigregister
Bond_swigregister(Bond)

class Fragment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fragment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fragment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Fragment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Fragment
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Fragment_copy(*args)
    def clear(*args): return _iCppExtention.Fragment_clear(*args)
    __swig_getmethods__["unit_fragment"] = lambda x: _iCppExtention.Fragment_unit_fragment
    if _newclass:unit_fragment = staticmethod(_iCppExtention.Fragment_unit_fragment)
    def get_n_atom_index(*args): return _iCppExtention.Fragment_get_n_atom_index(*args)
    def get_n_link(*args): return _iCppExtention.Fragment_get_n_link(*args)
    def get_n_elec(*args): return _iCppExtention.Fragment_get_n_elec(*args)
    def get_atom_index(*args): return _iCppExtention.Fragment_get_atom_index(*args)
    def get_atom_index_link1(*args): return _iCppExtention.Fragment_get_atom_index_link1(*args)
    def get_atom_index_link2(*args): return _iCppExtention.Fragment_get_atom_index_link2(*args)
    def chk_atom_in(*args): return _iCppExtention.Fragment_chk_atom_in(*args)
    def push_back_atom_index(*args): return _iCppExtention.Fragment_push_back_atom_index(*args)
    def pick_up_atom_index(*args): return _iCppExtention.Fragment_pick_up_atom_index(*args)
    def push_back_atom_index_link(*args): return _iCppExtention.Fragment_push_back_atom_index_link(*args)
    def pick_up_atom_index_link(*args): return _iCppExtention.Fragment_pick_up_atom_index_link(*args)
    def push_back_elec(*args): return _iCppExtention.Fragment_push_back_elec(*args)
    def pick_up_elec(*args): return _iCppExtention.Fragment_pick_up_elec(*args)
Fragment_swigregister = _iCppExtention.Fragment_swigregister
Fragment_swigregister(Fragment)
Fragment_unit_fragment = _iCppExtention.Fragment_unit_fragment

class LinkGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_LinkGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_LinkGroup
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.LinkGroup_copy(*args)
    def clear(*args): return _iCppExtention.LinkGroup_clear(*args)
    def get_n_atom_index(*args): return _iCppExtention.LinkGroup_get_n_atom_index(*args)
    def get_atom_index(*args): return _iCppExtention.LinkGroup_get_atom_index(*args)
    def get_residue_index(*args): return _iCppExtention.LinkGroup_get_residue_index(*args)
    def chk_atom_in(*args): return _iCppExtention.LinkGroup_chk_atom_in(*args)
    def push_back_atom_index(*args): return _iCppExtention.LinkGroup_push_back_atom_index(*args)
    def pick_up_atom_index(*args): return _iCppExtention.LinkGroup_pick_up_atom_index(*args)
    def set_residue_index(*args): return _iCppExtention.LinkGroup_set_residue_index(*args)
LinkGroup_swigregister = _iCppExtention.LinkGroup_swigregister
LinkGroup_swigregister(LinkGroup)

class BioUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BioUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioUnit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_BioUnit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_BioUnit
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.BioUnit_copy(*args)
    def clear(*args): return _iCppExtention.BioUnit_clear(*args)
    def get_type(*args): return _iCppExtention.BioUnit_get_type(*args)
    def get_n_atom_index(*args): return _iCppExtention.BioUnit_get_n_atom_index(*args)
    def get_terminal_c(*args): return _iCppExtention.BioUnit_get_terminal_c(*args)
    def get_terminal_n(*args): return _iCppExtention.BioUnit_get_terminal_n(*args)
    def get_ss_bond(*args): return _iCppExtention.BioUnit_get_ss_bond(*args)
    def get_link_unit_c(*args): return _iCppExtention.BioUnit_get_link_unit_c(*args)
    def get_link_unit_n(*args): return _iCppExtention.BioUnit_get_link_unit_n(*args)
    def get_name(*args): return _iCppExtention.BioUnit_get_name(*args)
    def get_abbr_1(*args): return _iCppExtention.BioUnit_get_abbr_1(*args)
    def get_abbr_3(*args): return _iCppExtention.BioUnit_get_abbr_3(*args)
    def get_atom_index(*args): return _iCppExtention.BioUnit_get_atom_index(*args)
    def get_atom_type(*args): return _iCppExtention.BioUnit_get_atom_type(*args)
    def get_c0(*args): return _iCppExtention.BioUnit_get_c0(*args)
    def get_c1(*args): return _iCppExtention.BioUnit_get_c1(*args)
    def get_n2(*args): return _iCppExtention.BioUnit_get_n2(*args)
    def get_h3(*args): return _iCppExtention.BioUnit_get_h3(*args)
    def get_o4(*args): return _iCppExtention.BioUnit_get_o4(*args)
    def get_h5(*args): return _iCppExtention.BioUnit_get_h5(*args)
    def get_ram_diag_cn(*args): return _iCppExtention.BioUnit_get_ram_diag_cn(*args)
    def get_ram_diag_cc(*args): return _iCppExtention.BioUnit_get_ram_diag_cc(*args)
    def set_type(*args): return _iCppExtention.BioUnit_set_type(*args)
    def set_name(*args): return _iCppExtention.BioUnit_set_name(*args)
    def set_terminal_c(*args): return _iCppExtention.BioUnit_set_terminal_c(*args)
    def set_terminal_n(*args): return _iCppExtention.BioUnit_set_terminal_n(*args)
    def set_ss_bond(*args): return _iCppExtention.BioUnit_set_ss_bond(*args)
    def set_link_unit_c(*args): return _iCppExtention.BioUnit_set_link_unit_c(*args)
    def set_link_unit_n(*args): return _iCppExtention.BioUnit_set_link_unit_n(*args)
    def set_abbr_1(*args): return _iCppExtention.BioUnit_set_abbr_1(*args)
    def set_abbr_3(*args): return _iCppExtention.BioUnit_set_abbr_3(*args)
    def push_back_atom_index(*args): return _iCppExtention.BioUnit_push_back_atom_index(*args)
    def set_ram_diag_angle(*args): return _iCppExtention.BioUnit_set_ram_diag_angle(*args)
BioUnit_swigregister = _iCppExtention.BioUnit_swigregister
BioUnit_swigregister(BioUnit)

class AlphaHelix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlphaHelix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlphaHelix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_AlphaHelix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_AlphaHelix
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.AlphaHelix_copy(*args)
    def clear(*args): return _iCppExtention.AlphaHelix_clear(*args)
    def get_n_biounit(*args): return _iCppExtention.AlphaHelix_get_n_biounit(*args)
    def get_biounit_index(*args): return _iCppExtention.AlphaHelix_get_biounit_index(*args)
    def push_back_biounit(*args): return _iCppExtention.AlphaHelix_push_back_biounit(*args)
AlphaHelix_swigregister = _iCppExtention.AlphaHelix_swigregister
AlphaHelix_swigregister(AlphaHelix)

class Molecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Molecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Molecule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Molecule
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Molecule_copy(*args)
    def clear(*args): return _iCppExtention.Molecule_clear(*args)
    def get_natom(*args): return _iCppExtention.Molecule_get_natom(*args)
    def get_natom_atomic(*args): return _iCppExtention.Molecule_get_natom_atomic(*args)
    def get_atom(*args): return _iCppExtention.Molecule_get_atom(*args)
    def get_atom_innerR(*args): return _iCppExtention.Molecule_get_atom_innerR(*args)
    def get_atom_bonding(*args): return _iCppExtention.Molecule_get_atom_bonding(*args)
    def get_atom_distance(*args): return _iCppExtention.Molecule_get_atom_distance(*args)
    def add_atom(*args): return _iCppExtention.Molecule_add_atom(*args)
    def delete_atom(*args): return _iCppExtention.Molecule_delete_atom(*args)
    def change_atom_order(*args): return _iCppExtention.Molecule_change_atom_order(*args)
    def change_atom_order_up(*args): return _iCppExtention.Molecule_change_atom_order_up(*args)
    def change_atom_order_down(*args): return _iCppExtention.Molecule_change_atom_order_down(*args)
    def rotate_atom(*args): return _iCppExtention.Molecule_rotate_atom(*args)
    def get_nbond(*args): return _iCppExtention.Molecule_get_nbond(*args)
    def get_bond(*args): return _iCppExtention.Molecule_get_bond(*args)
    def chk_bond_exist(*args): return _iCppExtention.Molecule_chk_bond_exist(*args)
    def add_bond(*args): return _iCppExtention.Molecule_add_bond(*args)
    def add_bond_auto(*args): return _iCppExtention.Molecule_add_bond_auto(*args)
    def delete_bond(*args): return _iCppExtention.Molecule_delete_bond(*args)
    def delete_bond_SS(*args): return _iCppExtention.Molecule_delete_bond_SS(*args)
    def add_bond_SS(*args): return _iCppExtention.Molecule_add_bond_SS(*args)
    def get_nlinkgroup(*args): return _iCppExtention.Molecule_get_nlinkgroup(*args)
    def get_ilinkgroup_from_iatom(*args): return _iCppExtention.Molecule_get_ilinkgroup_from_iatom(*args)
    def get_ilinkgroup_from_biounit(*args): return _iCppExtention.Molecule_get_ilinkgroup_from_biounit(*args)
    def get_iseq_from_biounit(*args): return _iCppExtention.Molecule_get_iseq_from_biounit(*args)
    def get_ibiounit_cterm(*args): return _iCppExtention.Molecule_get_ibiounit_cterm(*args)
    def get_ibiounit_nterm(*args): return _iCppExtention.Molecule_get_ibiounit_nterm(*args)
    def get_ibiounit_nterm_plus(*args): return _iCppExtention.Molecule_get_ibiounit_nterm_plus(*args)
    def get_linkgroup(*args): return _iCppExtention.Molecule_get_linkgroup(*args)
    def get_linkgroup_total_mass(*args): return _iCppExtention.Molecule_get_linkgroup_total_mass(*args)
    def get_linkgroup_center_of_mass(*args): return _iCppExtention.Molecule_get_linkgroup_center_of_mass(*args)
    def get_linkgroup_distance(*args): return _iCppExtention.Molecule_get_linkgroup_distance(*args)
    def make_linkgroup(*args): return _iCppExtention.Molecule_make_linkgroup(*args)
    def delete_linkgroup(*args): return _iCppExtention.Molecule_delete_linkgroup(*args)
    def clear_fragment_linkgroup(*args): return _iCppExtention.Molecule_clear_fragment_linkgroup(*args)
    def clear_biounit_linkgroup(*args): return _iCppExtention.Molecule_clear_biounit_linkgroup(*args)
    def get_nbiounit_linkgroup(*args): return _iCppExtention.Molecule_get_nbiounit_linkgroup(*args)
    def get_nfragment_linkgroup(*args): return _iCppExtention.Molecule_get_nfragment_linkgroup(*args)
    def get_nalphahelix(*args): return _iCppExtention.Molecule_get_nalphahelix(*args)
    def make_alphahelix(*args): return _iCppExtention.Molecule_make_alphahelix(*args)
    def add_alphahelix(*args): return _iCppExtention.Molecule_add_alphahelix(*args)
    def delete_alphahelix(*args): return _iCppExtention.Molecule_delete_alphahelix(*args)
    def get_nfragment(*args): return _iCppExtention.Molecule_get_nfragment(*args)
    def get_fragment(*args): return _iCppExtention.Molecule_get_fragment(*args)
    def get_ncharge_fragment(*args): return _iCppExtention.Molecule_get_ncharge_fragment(*args)
    def get_ifragment_from_iatom(*args): return _iCppExtention.Molecule_get_ifragment_from_iatom(*args)
    def get_fragment_total_mass(*args): return _iCppExtention.Molecule_get_fragment_total_mass(*args)
    def get_fragment_center_of_mass(*args): return _iCppExtention.Molecule_get_fragment_center_of_mass(*args)
    def get_fragment_distance(*args): return _iCppExtention.Molecule_get_fragment_distance(*args)
    def get_fragment_distance_R(*args): return _iCppExtention.Molecule_get_fragment_distance_R(*args)
    def unit_fragment(*args): return _iCppExtention.Molecule_unit_fragment(*args)
    def unit_fragment_SS(*args): return _iCppExtention.Molecule_unit_fragment_SS(*args)
    def push_back_atom_to_fragment(*args): return _iCppExtention.Molecule_push_back_atom_to_fragment(*args)
    def push_back_elec_to_fragment(*args): return _iCppExtention.Molecule_push_back_elec_to_fragment(*args)
    def pick_up_elec_from_fragment(*args): return _iCppExtention.Molecule_pick_up_elec_from_fragment(*args)
    def push_back_link_to_fragment(*args): return _iCppExtention.Molecule_push_back_link_to_fragment(*args)
    def make_fragment_from_biounit(*args): return _iCppExtention.Molecule_make_fragment_from_biounit(*args)
    def make_fragment_from_biounit_cn(*args): return _iCppExtention.Molecule_make_fragment_from_biounit_cn(*args)
    def make_fragment_from_biounit_nc(*args): return _iCppExtention.Molecule_make_fragment_from_biounit_nc(*args)
    def make_fragment_from_linkgroup(*args): return _iCppExtention.Molecule_make_fragment_from_linkgroup(*args)
    def div_fragment(*args): return _iCppExtention.Molecule_div_fragment(*args)
    def chk_s_exist_in_fragment(*args): return _iCppExtention.Molecule_chk_s_exist_in_fragment(*args)
    def chk_fragment_h2o(*args): return _iCppExtention.Molecule_chk_fragment_h2o(*args)
    def delete_fragment(*args): return _iCppExtention.Molecule_delete_fragment(*args)
    def get_nbiounit(*args): return _iCppExtention.Molecule_get_nbiounit(*args)
    def get_ibiounit_from_iatom(*args): return _iCppExtention.Molecule_get_ibiounit_from_iatom(*args)
    def get_ibiounit_from_fragment(*args): return _iCppExtention.Molecule_get_ibiounit_from_fragment(*args)
    def get_ibiounit_ss_bond(*args): return _iCppExtention.Molecule_get_ibiounit_ss_bond(*args)
    def get_biounit_type_from_iatom(*args): return _iCppExtention.Molecule_get_biounit_type_from_iatom(*args)
    def get_biounit_atom_type_from_iatom(*args): return _iCppExtention.Molecule_get_biounit_atom_type_from_iatom(*args)
    def get_biounit_total_mass(*args): return _iCppExtention.Molecule_get_biounit_total_mass(*args)
    def get_biounit_center_of_mass(*args): return _iCppExtention.Molecule_get_biounit_center_of_mass(*args)
    def get_biounit(*args): return _iCppExtention.Molecule_get_biounit(*args)
    def push_back_atom_to_biounit(*args): return _iCppExtention.Molecule_push_back_atom_to_biounit(*args)
    def biounit_analysis(*args): return _iCppExtention.Molecule_biounit_analysis(*args)
    def get_nuclear_repulsion(*args): return _iCppExtention.Molecule_get_nuclear_repulsion(*args)
    def get_total_mass(*args): return _iCppExtention.Molecule_get_total_mass(*args)
    def get_center_of_mass(*args): return _iCppExtention.Molecule_get_center_of_mass(*args)
    def get_max_X(*args): return _iCppExtention.Molecule_get_max_X(*args)
    def get_max_Y(*args): return _iCppExtention.Molecule_get_max_Y(*args)
    def get_max_Z(*args): return _iCppExtention.Molecule_get_max_Z(*args)
    def get_min_X(*args): return _iCppExtention.Molecule_get_min_X(*args)
    def get_min_Y(*args): return _iCppExtention.Molecule_get_min_Y(*args)
    def get_min_Z(*args): return _iCppExtention.Molecule_get_min_Z(*args)
    def get_max_innerX(*args): return _iCppExtention.Molecule_get_max_innerX(*args)
    def get_max_innerY(*args): return _iCppExtention.Molecule_get_max_innerY(*args)
    def get_max_innerZ(*args): return _iCppExtention.Molecule_get_max_innerZ(*args)
    def get_min_innerX(*args): return _iCppExtention.Molecule_get_min_innerX(*args)
    def get_min_innerY(*args): return _iCppExtention.Molecule_get_min_innerY(*args)
    def get_min_innerZ(*args): return _iCppExtention.Molecule_get_min_innerZ(*args)
    def get_distance_R(*args): return _iCppExtention.Molecule_get_distance_R(*args)
    def get_distance_ilg_ifrag(*args): return _iCppExtention.Molecule_get_distance_ilg_ifrag(*args)
    def get_distance_ilg_ilg(*args): return _iCppExtention.Molecule_get_distance_ilg_ilg(*args)
    def get_distance_ifrag_ifrag(*args): return _iCppExtention.Molecule_get_distance_ifrag_ifrag(*args)
    def add_molecule(*args): return _iCppExtention.Molecule_add_molecule(*args)
    def translate(*args): return _iCppExtention.Molecule_translate(*args)
    def rotate(*args): return _iCppExtention.Molecule_rotate(*args)
    def rotate_axis(*args): return _iCppExtention.Molecule_rotate_axis(*args)
    def move_123(*args): return _iCppExtention.Molecule_move_123(*args)
    def pick_up_overlap(*args): return _iCppExtention.Molecule_pick_up_overlap(*args)
    def set_innerAxis_origin(*args): return _iCppExtention.Molecule_set_innerAxis_origin(*args)
    def set_innerAxis_x(*args): return _iCppExtention.Molecule_set_innerAxis_x(*args)
    def set_innerAxis_y(*args): return _iCppExtention.Molecule_set_innerAxis_y(*args)
    def set_innerAxis_z(*args): return _iCppExtention.Molecule_set_innerAxis_z(*args)
    def get_innerAxis_origin(*args): return _iCppExtention.Molecule_get_innerAxis_origin(*args)
    def get_innerAxis_x(*args): return _iCppExtention.Molecule_get_innerAxis_x(*args)
    def get_innerAxis_y(*args): return _iCppExtention.Molecule_get_innerAxis_y(*args)
    def get_innerAxis_z(*args): return _iCppExtention.Molecule_get_innerAxis_z(*args)
    def R_to_innerR(*args): return _iCppExtention.Molecule_R_to_innerR(*args)
    def innerR_to_R(*args): return _iCppExtention.Molecule_innerR_to_R(*args)
    def read(*args): return _iCppExtention.Molecule_read(*args)
    def read_paics_out_coord(*args): return _iCppExtention.Molecule_read_paics_out_coord(*args)
    def read_paics_out_fragment(*args): return _iCppExtention.Molecule_read_paics_out_fragment(*args)
    def read_paics_out_opt_coord_num(*args): return _iCppExtention.Molecule_read_paics_out_opt_coord_num(*args)
    def read_paics_out_opt_coord(*args): return _iCppExtention.Molecule_read_paics_out_opt_coord(*args)
    def read_paics_in_coord(*args): return _iCppExtention.Molecule_read_paics_in_coord(*args)
    def read_paics_in_fragment(*args): return _iCppExtention.Molecule_read_paics_in_fragment(*args)
    def read_abinitmp_out_coord(*args): return _iCppExtention.Molecule_read_abinitmp_out_coord(*args)
    def read_abinitmp_out_fragment(*args): return _iCppExtention.Molecule_read_abinitmp_out_fragment(*args)
    def read_gamess_out_coord(*args): return _iCppExtention.Molecule_read_gamess_out_coord(*args)
    def read_pdb_coord(*args): return _iCppExtention.Molecule_read_pdb_coord(*args)
    def write_abinitmp_in(*args): return _iCppExtention.Molecule_write_abinitmp_in(*args)
    def write_gamess_in(*args): return _iCppExtention.Molecule_write_gamess_in(*args)
    def write_bsview_cpf(*args): return _iCppExtention.Molecule_write_bsview_cpf(*args)
    def write_paics_in_charge(*args): return _iCppExtention.Molecule_write_paics_in_charge(*args)
    def write_paics_in_fragment(*args): return _iCppExtention.Molecule_write_paics_in_fragment(*args)
    def write_paics_in_basis(*args): return _iCppExtention.Molecule_write_paics_in_basis(*args)
    def write_paics_in_basis_aux(*args): return _iCppExtention.Molecule_write_paics_in_basis_aux(*args)
    def write_paics_in(*args): return _iCppExtention.Molecule_write_paics_in(*args)
    def write_pdb(*args): return _iCppExtention.Molecule_write_pdb(*args)
    def print_coord_abinitmp(*args): return _iCppExtention.Molecule_print_coord_abinitmp(*args)
    def print_coord_gamess(*args): return _iCppExtention.Molecule_print_coord_gamess(*args)
    def print_coord_paics(*args): return _iCppExtention.Molecule_print_coord_paics(*args)
    def over_lattice(*args): return _iCppExtention.Molecule_over_lattice(*args)
    __swig_getmethods__["space_group"] = lambda x: _iCppExtention.Molecule_space_group
    if _newclass:space_group = staticmethod(_iCppExtention.Molecule_space_group)
    __swig_getmethods__["space_group_trans_0_1"] = lambda x: _iCppExtention.Molecule_space_group_trans_0_1
    if _newclass:space_group_trans_0_1 = staticmethod(_iCppExtention.Molecule_space_group_trans_0_1)
    __swig_getmethods__["space_group_inv"] = lambda x: _iCppExtention.Molecule_space_group_inv
    if _newclass:space_group_inv = staticmethod(_iCppExtention.Molecule_space_group_inv)
    __swig_getmethods__["calc_CHPI"] = lambda x: _iCppExtention.Molecule_calc_CHPI
    if _newclass:calc_CHPI = staticmethod(_iCppExtention.Molecule_calc_CHPI)
    __swig_getmethods__["chk_CHPI_region1"] = lambda x: _iCppExtention.Molecule_chk_CHPI_region1
    if _newclass:chk_CHPI_region1 = staticmethod(_iCppExtention.Molecule_chk_CHPI_region1)
    __swig_getmethods__["chk_CHPI_region2"] = lambda x: _iCppExtention.Molecule_chk_CHPI_region2
    if _newclass:chk_CHPI_region2 = staticmethod(_iCppExtention.Molecule_chk_CHPI_region2)
Molecule_swigregister = _iCppExtention.Molecule_swigregister
Molecule_swigregister(Molecule)
Molecule_space_group = _iCppExtention.Molecule_space_group
Molecule_space_group_trans_0_1 = _iCppExtention.Molecule_space_group_trans_0_1
Molecule_space_group_inv = _iCppExtention.Molecule_space_group_inv
Molecule_calc_CHPI = _iCppExtention.Molecule_calc_CHPI
Molecule_chk_CHPI_region1 = _iCppExtention.Molecule_chk_CHPI_region1
Molecule_chk_CHPI_region2 = _iCppExtention.Molecule_chk_CHPI_region2

class Eye(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Eye, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Eye, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iCppExtention.new_Eye(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iCppExtention.delete_Eye
    __del__ = lambda self : None;
    def copy(*args): return _iCppExtention.Eye_copy(*args)
    def get_R(*args): return _iCppExtention.Eye_get_R(*args)
    def get_eyeAxis_x(*args): return _iCppExtention.Eye_get_eyeAxis_x(*args)
    def get_eyeAxis_y(*args): return _iCppExtention.Eye_get_eyeAxis_y(*args)
    def get_eyeAxis_z(*args): return _iCppExtention.Eye_get_eyeAxis_z(*args)
    def set_R(*args): return _iCppExtention.Eye_set_R(*args)
    def add_R(*args): return _iCppExtention.Eye_add_R(*args)
    def set_eyeAxis_x(*args): return _iCppExtention.Eye_set_eyeAxis_x(*args)
    def set_eyeAxis_y(*args): return _iCppExtention.Eye_set_eyeAxis_y(*args)
    def set_eyeAxis_z(*args): return _iCppExtention.Eye_set_eyeAxis_z(*args)
    def R_to_eyeR(*args): return _iCppExtention.Eye_R_to_eyeR(*args)
    def eyeR_to_R(*args): return _iCppExtention.Eye_eyeR_to_R(*args)
    def eyeAxis_z_to_r(*args): return _iCppExtention.Eye_eyeAxis_z_to_r(*args)
    def eyeAxis_rotate_eyeAxis_x(*args): return _iCppExtention.Eye_eyeAxis_rotate_eyeAxis_x(*args)
    def eyeAxis_rotate_eyeAxis_y(*args): return _iCppExtention.Eye_eyeAxis_rotate_eyeAxis_y(*args)
    def eyeAxis_rotate_eyeAxis_z(*args): return _iCppExtention.Eye_eyeAxis_rotate_eyeAxis_z(*args)
    def eyeAxis_reset_for_z(*args): return _iCppExtention.Eye_eyeAxis_reset_for_z(*args)
    def translate(*args): return _iCppExtention.Eye_translate(*args)
    def translate_x(*args): return _iCppExtention.Eye_translate_x(*args)
    def translate_y(*args): return _iCppExtention.Eye_translate_y(*args)
    def translate_z(*args): return _iCppExtention.Eye_translate_z(*args)
    def translate_fixed_view(*args): return _iCppExtention.Eye_translate_fixed_view(*args)
    def translate_fixed_view_x(*args): return _iCppExtention.Eye_translate_fixed_view_x(*args)
    def translate_fixed_view_y(*args): return _iCppExtention.Eye_translate_fixed_view_y(*args)
    def translate_fixed_view_z(*args): return _iCppExtention.Eye_translate_fixed_view_z(*args)
    def translate_eyeAxis(*args): return _iCppExtention.Eye_translate_eyeAxis(*args)
    def translate_eyeAxis_x(*args): return _iCppExtention.Eye_translate_eyeAxis_x(*args)
    def translate_eyeAxis_y(*args): return _iCppExtention.Eye_translate_eyeAxis_y(*args)
    def translate_eyeAxis_z(*args): return _iCppExtention.Eye_translate_eyeAxis_z(*args)
    def translate_eyeAxis_fixed_view(*args): return _iCppExtention.Eye_translate_eyeAxis_fixed_view(*args)
    def translate_eyeAxis_fixed_view_x(*args): return _iCppExtention.Eye_translate_eyeAxis_fixed_view_x(*args)
    def translate_eyeAxis_fixed_view_y(*args): return _iCppExtention.Eye_translate_eyeAxis_fixed_view_y(*args)
    def translate_eyeAxis_fixed_view_z(*args): return _iCppExtention.Eye_translate_eyeAxis_fixed_view_z(*args)
    def rotate(*args): return _iCppExtention.Eye_rotate(*args)
    def rotate_x(*args): return _iCppExtention.Eye_rotate_x(*args)
    def rotate_y(*args): return _iCppExtention.Eye_rotate_y(*args)
    def rotate_z(*args): return _iCppExtention.Eye_rotate_z(*args)
    def rotate_fixed_view(*args): return _iCppExtention.Eye_rotate_fixed_view(*args)
    def rotate_fixed_view_x(*args): return _iCppExtention.Eye_rotate_fixed_view_x(*args)
    def rotate_fixed_view_y(*args): return _iCppExtention.Eye_rotate_fixed_view_y(*args)
    def rotate_fixed_view_z(*args): return _iCppExtention.Eye_rotate_fixed_view_z(*args)
    def rotate_eyeAxis(*args): return _iCppExtention.Eye_rotate_eyeAxis(*args)
    def rotate_eyeAxis_x(*args): return _iCppExtention.Eye_rotate_eyeAxis_x(*args)
    def rotate_eyeAxis_y(*args): return _iCppExtention.Eye_rotate_eyeAxis_y(*args)
    def rotate_eyeAxis_z(*args): return _iCppExtention.Eye_rotate_eyeAxis_z(*args)
    def rotate_eyeAxis_fixed_view(*args): return _iCppExtention.Eye_rotate_eyeAxis_fixed_view(*args)
    def rotate_eyeAxis_fixed_view_x(*args): return _iCppExtention.Eye_rotate_eyeAxis_fixed_view_x(*args)
    def rotate_eyeAxis_fixed_view_y(*args): return _iCppExtention.Eye_rotate_eyeAxis_fixed_view_y(*args)
    def rotate_eyeAxis_fixed_view_z(*args): return _iCppExtention.Eye_rotate_eyeAxis_fixed_view_z(*args)
Eye_swigregister = _iCppExtention.Eye_swigregister
Eye_swigregister(Eye)

py_Molecule_read = _iCppExtention.py_Molecule_read
py_Molecule_ViewAtom_copy = _iCppExtention.py_Molecule_ViewAtom_copy
py_Molecule_ViewBond_copy = _iCppExtention.py_Molecule_ViewBond_copy
py_draw_bond_all = _iCppExtention.py_draw_bond_all
py_draw_bond_line = _iCppExtention.py_draw_bond_line


